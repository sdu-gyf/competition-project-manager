<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sdu.ise.labs.dao.AthleteMapper">
    <resultMap id="BaseResultMap" type="cn.edu.sdu.ise.labs.model.Athlete">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="athlete_code" jdbcType="VARCHAR" property="athleteCode"/>
        <result column="reg_code" jdbcType="VARCHAR" property="regCode"/>
        <result column="team_code" jdbcType="VARCHAR" property="teamCode"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="id_number" jdbcType="VARCHAR" property="idNumber"/>
        <result column="id_type" jdbcType="CHAR" property="idType"/>
        <result column="gender" jdbcType="CHAR" property="gender"/>
        <result column="age" jdbcType="INTEGER" property="age"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, athlete_code, reg_code, team_code, name, id_number, id_type, gender, age, created_at,
    updated_at, created_by, updated_by
    </sql>
    <select id="selectByExample" parameterType="cn.edu.sdu.ise.labs.model.AthleteExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from athlete
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from athlete
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from athlete
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="cn.edu.sdu.ise.labs.model.AthleteExample">
        delete from athlete
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.sdu.ise.labs.model.Athlete">
        insert into athlete (id, athlete_code, reg_code,
                             team_code, name, id_number,
                             id_type, gender, age, created_at,
                             updated_at, created_by, updated_by)
        values (#{id,jdbcType=INTEGER}, #{athleteCode,jdbcType=VARCHAR}, #{regCode,jdbcType=VARCHAR},
                #{teamCode,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{idNumber,jdbcType=VARCHAR},
                #{idType,jdbcType=CHAR}, #{gender,jdbcType=CHAR}, #{age,jdbcType=INTEGER},
                #{createdAt,jdbcType=TIMESTAMP},
                #{updatedAt,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=VARCHAR}, #{updatedBy,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="cn.edu.sdu.ise.labs.model.Athlete">
        insert into athlete
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="athleteCode != null">
                athlete_code,
            </if>
            <if test="regCode != null">
                reg_code,
            </if>
            <if test="teamCode != null">
                team_code,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="idNumber != null">
                id_number,
            </if>
            <if test="idType != null">
                id_type,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
            <if test="createdBy != null">
                created_by,
            </if>
            <if test="updatedBy != null">
                updated_by,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="athleteCode != null">
                #{athleteCode,jdbcType=VARCHAR},
            </if>
            <if test="regCode != null">
                #{regCode,jdbcType=VARCHAR},
            </if>
            <if test="teamCode != null">
                #{teamCode,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="idNumber != null">
                #{idNumber,jdbcType=VARCHAR},
            </if>
            <if test="idType != null">
                #{idType,jdbcType=CHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=CHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="createdBy != null">
                #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedBy != null">
                #{updatedBy,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.sdu.ise.labs.model.AthleteExample" resultType="java.lang.Integer">
        select count(*) from athlete
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update athlete
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.athleteCode != null">
                athlete_code = #{record.athleteCode,jdbcType=VARCHAR},
            </if>
            <if test="record.regCode != null">
                reg_code = #{record.regCode,jdbcType=VARCHAR},
            </if>
            <if test="record.teamCode != null">
                team_code = #{record.teamCode,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.idNumber != null">
                id_number = #{record.idNumber,jdbcType=VARCHAR},
            </if>
            <if test="record.idType != null">
                id_type = #{record.idType,jdbcType=CHAR},
            </if>
            <if test="record.gender != null">
                gender = #{record.gender,jdbcType=CHAR},
            </if>
            <if test="record.age != null">
                age = #{record.age,jdbcType=INTEGER},
            </if>
            <if test="record.createdAt != null">
                created_at = #{record.createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedAt != null">
                updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createdBy != null">
                created_by = #{record.createdBy,jdbcType=VARCHAR},
            </if>
            <if test="record.updatedBy != null">
                updated_by = #{record.updatedBy,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update athlete
        set id = #{record.id,jdbcType=INTEGER},
        athlete_code = #{record.athleteCode,jdbcType=VARCHAR},
        reg_code = #{record.regCode,jdbcType=VARCHAR},
        team_code = #{record.teamCode,jdbcType=VARCHAR},
        name = #{record.name,jdbcType=VARCHAR},
        id_number = #{record.idNumber,jdbcType=VARCHAR},
        id_type = #{record.idType,jdbcType=CHAR},
        gender = #{record.gender,jdbcType=CHAR},
        age = #{record.age,jdbcType=INTEGER},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
        created_by = #{record.createdBy,jdbcType=VARCHAR},
        updated_by = #{record.updatedBy,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sdu.ise.labs.model.Athlete">
        update athlete
        <set>
            <if test="athleteCode != null">
                athlete_code = #{athleteCode,jdbcType=VARCHAR},
            </if>
            <if test="regCode != null">
                reg_code = #{regCode,jdbcType=VARCHAR},
            </if>
            <if test="teamCode != null">
                team_code = #{teamCode,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="idNumber != null">
                id_number = #{idNumber,jdbcType=VARCHAR},
            </if>
            <if test="idType != null">
                id_type = #{idType,jdbcType=CHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=CHAR},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="createdBy != null">
                created_by = #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedBy != null">
                updated_by = #{updatedBy,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.sdu.ise.labs.model.Athlete">
        update athlete
        set athlete_code = #{athleteCode,jdbcType=VARCHAR},
            reg_code     = #{regCode,jdbcType=VARCHAR},
            team_code    = #{teamCode,jdbcType=VARCHAR},
            name         = #{name,jdbcType=VARCHAR},
            id_number    = #{idNumber,jdbcType=VARCHAR},
            id_type      = #{idType,jdbcType=CHAR},
            gender       = #{gender,jdbcType=CHAR},
            age          = #{age,jdbcType=INTEGER},
            created_at   = #{createdAt,jdbcType=TIMESTAMP},
            updated_at   = #{updatedAt,jdbcType=TIMESTAMP},
            created_by   = #{createdBy,jdbcType=VARCHAR},
            updated_by   = #{updatedBy,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>